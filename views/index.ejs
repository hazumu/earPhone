<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=320, initial-scale=1, minimum-scale=1, maximum-scale=1">
<meta name="apple-mobile-web-app-capable" content="yes">
<link rel='stylesheet' href='/stylesheets/bootstrap.min.css' />
<link rel='stylesheet' href='/stylesheets/bootstrap-responsive.css' />
<link rel='stylesheet' href='/stylesheets/common.css' />
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="javascripts/BufferLoader.js"></script>
<script>
$(function(){
  var context = new webkitAudioContext();
  var soundList = {
      kick: "sounds/kick.wav",
      snare: "sounds/snare.wav",
      hihat: "sounds/hihat_real.mp3",
  };
  var soundBuffers;
  var soundPattern = {
    basic: [
      // 32拍用意する
      ["hihat", "kick"],
      [],
      [],
      [],
      ["hihat"],
      [],
      [],
      [],
      ["hihat", "snare"],
      [],
      [],
      [],
      ["hihat"],
      [],
      [],
      [],
      ["hihat", "kick"],
      [],
      [],
      [],
      ["hihat"],
      [],
      [],
      [],
      ["hihat", "snare"],
      [],
      [],
      [],
      ["hihat"],
      [],
      [],
      [],
    ],
    araya: [
      // 16拍用意する
      ["hihat", "kick"],
      [],
      ["hihat"],
      [],
      ["hihat", "snare"],
      [],
      ["hihat", "kick"],
      [],
      ["hihat", "kick"],
      [],
      ["hihat"],
      [],
      ["hihat", "snare"],
      [],
      ["hihat"],
      [],
      // 16拍用意する
      ["hihat", "kick"],
      [],
      ["hihat"],
      [],
      ["hihat", "snare"],
      [],
      ["hihat", "kick"],
      [],
      ["hihat", "kick"],
      [],
      ["hihat"],
      [],
      ["hihat", "snare"],
      [],
      ["hihat"],
      [],
    ],
    heart: [
    // 16拍用意する
      ["hihat", "kick"],
      [],
      ["hihat"],
      [],
      ["hihat", "snare"],
      [],
      ["hihat"],
      [],
      ["hihat", "kick"],
      [],
      ["hihat", "kick"],
      [],
      ["hihat", "snare"],
      [],
      ["hihat"],
      [],
      // 16拍用意する
      ["hihat", "kick"],
      [],
      ["hihat"],
      [],
      ["hihat", "snare"],
      [],
      ["hihat", "kick"],
      [],
      ["hihat"],
      [],
      ["hihat", "kick"],
      [],
      ["hihat", "snare"],
      [],
      ["hihat"],
      [],
    ],

    liver: [
      // 16拍用意する
      ["hihat", "kick"],
      [],
      ["hihat"],
      [],
      ["hihat", "snare"],
      [],
      ["hihat"],
      [],
      ["hihat", "kick"],
      [],
      ["hihat", "kick"],
      [],
      ["hihat", "snare"],
      [],
      ["hihat"],
      [],
      // 16拍用意する
      ["hihat", "kick"],
      [],
      ["hihat"],
      [],
      ["hihat", "kick"],
      [],
      ["hihat", "snare"],
      [],
      ["hihat", "kick"],
      [],
      ["hihat", "kick"],
      [],
      ["hihat", "snare"],
      [],
      ["hihat"],
      [],
    ],
  };

  var BL = new BufferLoader(context, storeSound);
  BL.load(soundList);

  function oscTone(freq, vol, type){
      if(vol == undefined){
        vol = 1;
      }
      if(type == undefined){
        type = 0;
      }
      var oscillator = context.createOscillator();
      eg = context.createGainNode();
      //eg.gain.linearRampToValueAtTime(1, 0.1);
      oscillator.connect(eg);
      eg.connect(context.destination);
      //console.log(eg);

      oscillator.type = type;
      oscillator.frequency.value = freq;
      //oscillator.connect(context.destination);
      oscillator.noteOn(0);

     var t0 = context.currentTime;
     //eg.gain.value= 0;
     eg.gain.setValueAtTime(vol, t0);
     eg.gain.linearRampToValueAtTime(vol/2, t0 + 0.5);
     return oscillator
  }
  var baseTone = [  // 半音の周波数
    261.62,  // C   0
    277.18,  // C#  1
    293.66,  // D   2
    311.12,  // D#  3
    329.62,  // E   4
    349.22,  // F   5
    369.99,  // F#  6
    391.99,  // G   7
    415.30,  // G#  8
    440.00,  // A   9
    466.16,  // A#  10
    493.88   // B   11
  ];
  var baseMagic = [ // 全音のスケール
    0, 2, 4, 5, 7, 9, 11
  ];
  // 4オクターブ分のスケールを用意
  var magic = [
    0, 2, 4, 5, 7, 9, 11,
    12,14,16,17,19,21,23,
    24,26,28,29,31,33,35,
    36,38,40,41,43,45,47,
  ];
  // 和音の構成音（半音ベース）
  var chord = {
    'M':[0,4,7],
    'M7':[0,4,7,11],
    'm':[0,3,7],
    'm7':[0,3,7,11]
  };
  // 音名と配列indexの対応(半音ベース)
  var toneNameMap = {
    'c': 0,
    'd': 2,
    'e': 4,
    'f': 5,
    'g': 7,
    'a': 9,
    'b': 11,
  };
  // とりあえずスコアを作ってみる

  var chordScore = [
    // sunny
    {root:'c',scale: 'M', base:0},
    {root:'g',scale: 'M', base:1},
    {root:'a',scale: 'm', base:0},
    {root:'a',scale:'m7', base:3},
    {root:'f',scale: 'M', base:0},
    {root:'d',scale:'m7', base:0},
    {root:'g',scale: 'M', base:0},
    {root:'c',scale: 'M', base:0},
    {root:'b',scale:'M7', base:0, speed: 1000/4},

    // rainy
    {root:'e',scale: 'm', base:0},
    {root:'d',scale: 'M', base:1},
    {root:'c',scale: 'M', base:0},
    {root:'b',scale:'m', base:3},
    {root:'b',scale: 'M7', base:0},
    {root:'e',scale:'m', base:0},
    {root:'c',scale: 'M', base:0},
    {root:'d',scale: 'M7', base:0, speed: 1000/24},
 
    // alarm
    {root:'g',scale: 'M', base:0},
    {root:'b',scale: 'M7', base:1},
    {root:'e',scale: 'm', base:0},
    {root:'g',scale: 'M', base:3},
    {root:'c',scale: 'M', base:0},
    {root:'d',scale: 'M', base:0},
    {root:'g',scale: 'M7', base:0, speed: 1000/4},
  
    // sleep
    {root:'c',scale: 'M', base:0},
    {root:'g',scale: 'M', base:1},
    {root:'a',scale: 'm', base:0},
    {root:'a',scale:'m7', base:3},
    {root:'f',scale: 'M', base:0},
    {root:'d',scale:'m7', base:0},
    {root:'g',scale: 'M7', base:0},
    {root:'c',scale: 'M', base:0},
  ];

  // 4オクターブ分の周波数生成
  var tone = [];
  for(var i =0; i < 12;i ++){
    tone[i] = baseTone[i] /2;
  }
  for(var i =0; i < 12;i ++){
    tone[i + 12] = baseTone[i];
  }
  for(var i =0; i < 12;i ++){
    tone[i + 24] = baseTone[i]*2;
  }
  for(var i =0; i < 12;i ++){
    tone[i + 36] = baseTone[i]*4;
  }

  // メロディの種を作ってみる
  // 1小節8分音符が最小単位として
  var melodyRythm = [
    {len:1},
    {len:1},
    {len:1},
    {len:1},
    {len:2},
    {len:1},
    {len:1},
  ];
  // ギターパート用のリズムとメロディ指定
  // 1小節8分音符が最小単位として
  var guitarMelody = [
    {len: 1, tones:[0,1,2]},
    {len: 1, tones:[0]},
    {len: 1, tones:[0,1,2]},
    {len: 1, tones:[1]},
    {len: 1, tones:[0,1,2]},
    {len: 1, tones:[2]},
    {len: 1, tones:[0,1,2]},
    {len: 1, tones:[]},
  ];

  // 0 - (n-1)
  function randint(n){
    var r = Math.floor(Math.random() * n);
    return r;
  }
  function inArray(arr, target){
    for(var i = 0; i < arr.length; i++){
      if(arr[i]==target)return true;
    }
    return false;
  }


  // オシレーター
  n1 = null;  // chord1
  n2 = null;  // chord2
  n3 = null;  // chord3
  n4 = null;  // chord4
  n5 = null;  // melody

  t = 0;  // タイマー
  root = 0;  // 今のrootのmagic index
  nowChord = null; // 今のスコア

  function ngTone(n){
    //return (n%7 == 1 || n%7 == 5); // okinawa
    //return (n%7 == 3 || n%7 == 6); // japanese
    return false;
  }
  
  // chordScore上の位置
  cpos = 0;
  // rythm上の位置
  rpos = 0;

  targetSpeed = speed = 1000/16;
  var restToneLen = 0; // 今の音をあと何テンポ残すか

  $('#start').click(function(){
    function tick(){
      if(t % 32 == 0){  // 小節？
        nowChord = chordScore[cpos];
        console.log(nowChord);
        root = randint(baseMagic.length);
        cpos ++;
        if(cpos >= chordScore.length){
          cpos = 0;
        }
 
        if(nowChord.speed){
          targetSpeed = nowChord.speed;
        }
      }

      if (t % 4 === 0) {

        if(n1 && (rpos == 0 || !inArray(guitarMelody[rpos].tones,0))){n1.noteOff(0);n1 = null;}
        if(n2 && (rpos == 0 || !inArray(guitarMelody[rpos].tones,1))){n2.noteOff(0);n2 = null;}
        if(n3 && (rpos == 0 || !inArray(guitarMelody[rpos].tones,2))){n3.noteOff(0);n3 = null;}
        if(n4 && (rpos == 0 || !inArray(guitarMelody[rpos].tones,3))){n4.noteOff(0);n4 = null;}

        var v = 0.5;
        var n;
        n = toneNameMap[nowChord.root];

        var cs = chord[nowChord.scale];
        // todo:回転指定の処理
        if(n1==null && inArray(guitarMelody[rpos].tones,0)){n1 = oscTone(tone[(n + cs[0]%7)] * 1, v, 0);}
        if(n2==null && inArray(guitarMelody[rpos].tones,1)){n2 = oscTone(tone[(n + cs[1]%7)] * 1, v, 0);}
        if(n3==null && inArray(guitarMelody[rpos].tones,2)){n3 = oscTone(tone[(n + cs[2]%7)] * 1, v, 0);}
        if(n4==null && inArray(guitarMelody[rpos].tones,3)){
          if(cs.length >= 4){
            n4 = oscTone(tone[(n + cs[3])%7], v); // 7th
          }
        }

        if(restToneLen == 0){
          if(n5)n5.noteOff(0);
          var v = 0.5;
          var n = 0;
          var cs = chord[nowChord.scale];
          while(true){
            // 使ってよい音程から一つ選ぶ
            n = cs[randint(cs.length)];
            if(ngTone(n)){
              continue;
            }
            break;
          }
          n5 = oscTone(tone[baseMagic[n%7]] * 2, v);
          restToneLen = melodyRythm[rpos].len;

          rpos ++;
          if(rpos >= melodyRythm.length){
            rpos = 0;
          }
        }
        if(restToneLen != 0)restToneLen --;
   
        if(Math.abs(speed - targetSpeed)>0.001){
          speed += (targetSpeed - speed)/10;
        }
      }

      //playDrumsPattern(t, "basic");
      playDrumsPattern(t, "araya");
      //playDrumsPattern(t, "heart");
      //playDrumsPattern(t, "liver");

      t ++;
      setTimeout(tick, speed);
    }
    setTimeout(tick, speed);
  });

  function storeSound(buffer) {
    soundBuffers = buffer;
    console.dir(soundBuffers);
  }

  function playBuffer(type) {
    var buffer = soundBuffers[type],
        source = context.createBufferSource();

    source.buffer = buffer;
    source.connect(context.destination);
    source.noteOn(0);
  }

  function playDrumsPattern(tick, pattern) {
    for (var type in soundPattern[pattern]) {
      var currentBeat = tick % 32,
          targetSoundBuffer = soundPattern[pattern][currentBeat],
          type;

      for (var i = 0, length = targetSoundBuffer.length;i < length;i++) {
        type = targetSoundBuffer[i];
        playBuffer(type);
      }
    }
  }
});
</script>

<body>

<div class="wrapper container-fluid">
    <div class="navbar navbar-default navbar-fixed-top">
        <div class="navbar-inner">
        <div class="container">
            <a class="brand" href="/">earPhone</a>
        </div>
        </div>
    </div>

    <!-- .row-fluid START -->
    <div class="row-fluid">
        <div id="imgWrap"><ul id="imgList"></ul></div>
        <div class="btnWrap">
            <button id="start">START</button>
        </div>
        <div class="debug">
            <div id="connectId"></div>
            <div id="type"></div>
            <div id="hostName"><%= hostName %></div>
        </div>
    </div>
</div>

<div id="likeBtn">イイネ！</div>
<script type="text/javascript">
$("#likeBtn").click(function(){
	$(this).toggleClass("on");
});
</script>

<script src="/socket.io/socket.io.js"></script>
<script src="/javascripts/main.js"></script>
</body>
</html>
